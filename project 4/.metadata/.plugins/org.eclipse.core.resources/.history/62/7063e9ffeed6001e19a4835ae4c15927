package in.co.pro4.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import in.co.pro4.bean.OrderBean;
import in.co.pro4.bean.UserBean;
import in.co.pro4.exception.ApplicationException;
import in.co.pro4.exception.DuplicateRecordException;
import in.co.pro4.utility.JDBCDataSource;

public class OrderModel {

	public static Integer nextPK() throws ApplicationException {
		log.debug("Model Next PK Started");

		Connection conn = null;
		int pk = 0;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement("SELECT MAX(ID) FROM ST_USER");
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				pk = rs.getInt(1);
			}
			rs.close();
		} catch (Exception e) {
			log.error("Database Exception....", e);
			throw new ApplicationException("Exception : in getting next pk");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

		log.debug("Model Next PK Ended");
		return pk + 1;
	}
	/**
	 * 
	 * Add a User
	 *
	 */
	public static long add(OrderBean bean) throws ApplicationException, DuplicateRecordException {
	
		Connection conn = null;
		int pk = 0;

	//	OrderModelBean beanExists = findByLogin(bean.);

		/*
		 * if (beanExists != null) {
		 * 
		 * throw new DuplicateRecordException("LogIn ID is already Exists"); }
		 */
		try {
			conn = JDBCDataSource.getConnection();
			pk = nextPK();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement(
					"INSERT INTO ST_ORDER VALUES(?, ?, ?)");
			pstmt.setLong(1, pk);
			pstmt.setString(2, bean.getShop());
			pstmt.setString(3, bean.getType());
			pstmt.setString(4, bean.getValue());
			

			pstmt.executeUpdate();

			conn.commit();
			pstmt.close();
		} catch (Exception e) {
			//.error("Database Exception....", e);
     
try {conn.rollback();} catch (Exception e1) {throw new ApplicationException("Exception : add rollback=" + e1.getMessage());}


       throw new ApplicationException("Exception : in adding user="+e.getMessage());	
			
	} finally {
			JDBCDataSource.closeConnection(conn);
		}
	//	log.debug("Model Add Ended");
		return pk;
	}
	/**
	 * 
	 * Update a user
	 *
	 */
	public void update(OrderBean bean) throws ApplicationException, DuplicateRecordException {
		//log.debug("Model Update Started");
		Connection conn = null;

		//UserBean beanExists = findByLogin(bean.getLogIn());

		/*
		 * if (beanExists != null && !(beanExists.getId() == bean.getId())) { //
		 * System.out.println("id " + beanExists.getId()); throw new
		 * DuplicateRecordException("Login Already Exists"); }
		 */

		try {
			conn = JDBCDataSource.getConnection();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement(
					"UPDATE ST_ORDER SET SHOP=?, TYPE=?, PRIZE=? WHERE ID=?");
			pstmt.setString(1, bean.getShop());


			pstmt.executeUpdate();

			conn.commit();
			conn.close();
		}
		
	}
	/**
	 * 
	 * Delete a User
	 *
	 */
	public static void delete(UserBean bean) throws ApplicationException {
	
		Connection conn = null;

		try {
			conn = JDBCDataSource.getConnection();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement("DELETE FROM ST_USER WHERE id=?");
			pstmt.setLong(1, bean.getId());
			pstmt.executeUpdate();

			conn.commit();
			pstmt.close();
		} catch (Exception e) {
			log.error("Database Exception");
			try {
				conn.rollback();
			} catch (Exception e1) {
				throw new ApplicationException("Exception : delete rollback" + e1.getMessage());
			}
			throw new ApplicationException("Exception : in deleting user");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		log.debug("Model Delete Ended");
	}


	/**
	 * 
	 * Find User by Login
	 *
	 */
	public static UserBean findByLogin(String login) throws ApplicationException {
		log.debug("Model Find By Login Started");
		StringBuffer sql = new StringBuffer("SELECT * FROM ST_USER WHERE LOGIN=?");

		UserBean bean = null;
		Connection conn = null;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());

			pstmt.setString(1, login);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				bean = new UserBean();

				bean.setId(rs.getLong(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLogIn(rs.getString(4));
				bean.setPassword(rs.getString(5));
				bean.setDob(rs.getDate(6));
				bean.setMobileNo(rs.getString(7));
				bean.setRoleId(rs.getLong(8));
				bean.setUnSuccessfullLogin(rs.getInt(9));
				bean.setGender(rs.getString(10));
				bean.setLastLogin(rs.getTimestamp(11));
				bean.setLock(rs.getString(12));
				bean.setRegisteredIP(rs.getString(13));
				bean.setLastloginIP(rs.getString(14));
				bean.setCreatedBy(rs.getString(15));
				bean.setModifiedBy(rs.getString(16));
				bean.setCreatedDatetime(rs.getTimestamp(17));
				bean.setModifiedDatetime(rs.getTimestamp(18));
			}
			rs.close();
		} catch (Exception e) {
			log.error("Database Exception...", e);
			throw new ApplicationException("Exception : In getting user by Login");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		log.debug("Model Find By Login Ended");
		return bean;
	}
	/**
	 * 
	 * Find User by PK
	 *
	 */
	public UserBean findByPK(long pk) throws ApplicationException {
		log.debug("Model Find By PK Started");
		StringBuffer sql = new StringBuffer("SELECT * FROM ST_USER WHERE ID=?");

		Connection conn = null;
		UserBean bean = null;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());
			pstmt.setLong(1, pk);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				bean = new UserBean();

				bean.setId(rs.getLong(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLogIn(rs.getString(4));
				bean.setPassword(rs.getString(5));
				bean.setDob(rs.getDate(6));
				bean.setMobileNo(rs.getString(7));
				bean.setRoleId(rs.getLong(8));
				bean.setUnSuccessfullLogin(rs.getInt(9));
				bean.setGender(rs.getString(10));
				bean.setLastLogin(rs.getTimestamp(11));
				bean.setLock(rs.getString(12));
				bean.setRegisteredIP(rs.getString(13));
				bean.setLastloginIP(rs.getString(14));
				bean.setCreatedBy(rs.getString(15));
				bean.setModifiedBy(rs.getString(16));
				bean.setCreatedDatetime(rs.getTimestamp(17));
				bean.setModifiedDatetime(rs.getTimestamp(18));
			}
			rs.close();
		} catch (Exception e) {
			log.error("Database Exception....", e);
			throw new ApplicationException("Exception : In getting user by PK");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		log.debug("Model Find By PK Ended");
		return bean;
	}
	/**
	 * 
	 * Search User with pagination
	 *
	 *
	 */
	public List search(UserBean bean, int pageNo, int pageSize) throws ApplicationException {
		System.out.println("List search(UserBean bean, int pageNo, int pageSize)");
		log.debug("Model User Search Started");
		StringBuffer sql = new StringBuffer("SELECT * FROM ST_USER WHERE 1=1");

		if (bean != null) {
			System.out.println(bean.getId());
			if (bean.getId() > 0) {
				sql.append(" AND ID Like '" + bean.getId()+"%'");
			}
			if (bean.getFirstName() != null && bean.getFirstName().length() > 0) {
				sql.append(" AND FIRST_NAME LIKE '" + bean.getFirstName() + "%'");
			}
			if (bean.getLastName() != null && bean.getLastName().length() > 0) {
				sql.append(" AND LAST_NAME LIKE '" + bean.getLastName() + "%'");
			}
			if (bean.getLogIn() != null && bean.getLogIn().length() > 0) {
				sql.append(" AND LOGIN LIKE '" + bean.getLogIn() + "%'");
			}
			if (bean.getPassword() != null && bean.getPassword().length() > 0) {
				sql.append(" AND PASSWORD LIKE '" + bean.getPassword() + "%'");
			}

			if (bean.getDob() != null && bean.getDob().getDate() > 0) {
				sql.append(" AND DOB= " + new java.sql.Date(bean.getDob().getTime()));
			}

			if (bean.getMobileNo() != null && bean.getMobileNo().length() > 0) {
				sql.append(" AND MOBILE_NO= " + bean.getMobileNo());
			}
			if (bean.getRoleId() > 0) {
				sql.append(" AND ROLE_ID=" + bean.getRoleId());
			}
			System.out.println(bean.getGender());
			if (bean.getGender() != null && bean.getGender().length() > 0) {
				sql.append(" AND GENDER LIKE '" + bean.getGender() + "%'");
			}
			if (bean.getUnSuccessfullLogin() > 0) {
				sql.append(" AND UNSUCCESSFULL_LOGIN=" + bean.getUnSuccessfullLogin());
			}
			if (bean.getLastLogin() != null && bean.getLastLogin().getTime() > 0) {
				sql.append(" AND LAST_LOGIN=" + bean.getLastLogin());
			}
			if (bean.getRegisteredIP() != null && bean.getRegisteredIP().length() > 0) {
				sql.append(" AND REGISTERED_IP LIKE '" + bean.getRegisteredIP() + "%'");
			}
			if (bean.getLastloginIP() != null && bean.getLastloginIP().length() > 0) {
				sql.append(" AND LOGIN_IP LIKE '" + bean.getLastloginIP() + "%'");
			}
		}

		if (pageSize > 0) {
			pageNo = (pageNo - 1) * pageSize;

			sql.append(" LIMIT " + pageNo + ", " + pageSize);
		}
		
		System.out.println(sql.toString());
	
		ArrayList list = new ArrayList();
		Connection conn = null;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				bean = new UserBean();

				bean.setId(rs.getLong(1));
				bean.setFirstName(rs.getString(2));
				bean.setLastName(rs.getString(3));
				bean.setLogIn(rs.getString(4));
				bean.setPassword(rs.getString(5));
				bean.setDob(rs.getDate(6));
				bean.setMobileNo(rs.getString(7));
				bean.setRoleId(rs.getLong(8));
				bean.setUnSuccessfullLogin(rs.getInt(9));
				bean.setGender(rs.getString(10));
				bean.setLastLogin(rs.getTimestamp(11));
				bean.setLock(rs.getString(12));
				bean.setRegisteredIP(rs.getString(13));
				bean.setLastloginIP(rs.getString(14));
				bean.setCreatedBy(rs.getString(15));
				bean.setModifiedBy(rs.getString(16));
				bean.setCreatedDatetime(rs.getTimestamp(17));
				bean.setModifiedDatetime(rs.getTimestamp(18));

				list.add(bean);
			}
			rs.close();
		} catch (Exception e) {
			log.error("Database Exception....", e);
			throw new ApplicationException("Exception : in getting user list");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		log.debug("Model User List Ended");
		return list;

}
