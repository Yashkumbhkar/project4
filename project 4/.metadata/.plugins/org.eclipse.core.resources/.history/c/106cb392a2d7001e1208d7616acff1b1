package in.co.pro4.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import in.co.pro4.bean.OrderBean;
import in.co.pro4.bean.UserBean;
import in.co.pro4.exception.ApplicationException;
import in.co.pro4.exception.DuplicateRecordException;
import in.co.pro4.utility.JDBCDataSource;

public class OrderModel {

	public static Integer nextPK() throws ApplicationException {

		Connection conn = null;
		int pk = 0;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement("SELECT MAX(ID) FROM ST_ORDER");
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				pk = rs.getInt(1);
			}
			rs.close();
		} catch (Exception e) {

			throw new ApplicationException("Exception : in getting next pk");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

		return pk + 1;
	}

	/**
	 * 
	 * Add a User
	 *
	 */
	public static long add(OrderBean bean) throws ApplicationException, DuplicateRecordException {

		Connection conn = null;
		int pk = 0;

		// OrderModelBean beanExists = findByLogin(bean.);

		/*
		 * if (beanExists != null) {
		 * 
		 * throw new DuplicateRecordException("LogIn ID is already Exists"); }
		 */
		try {
			conn = JDBCDataSource.getConnection();
			pk = nextPK();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement("INSERT INTO ST_ORDER VALUES(?, ?, ? , ?)");
			pstmt.setLong(1, pk);
			pstmt.setString(2, bean.getShop());
			pstmt.setString(3, bean.getType());
			pstmt.setInt(4, bean.getPrice());

			pstmt.executeUpdate();

			conn.commit();
			pstmt.close();
		} catch (Exception e) {
			// .error("Database Exception....", e);

			try {
				conn.rollback();
			} catch (Exception e1) {
				throw new ApplicationException("Exception : add rollback=" + e1.getMessage());
			}

			throw new ApplicationException("Exception : in adding user=" + e.getMessage());

		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		// log.debug("Model Add Ended");
		return pk;
	}

	/**
	 * 
	 * Update a user
	 *
	 */
	public void update(OrderBean bean) throws ApplicationException, DuplicateRecordException {
		// log.debug("Model Update Started");
		Connection conn = null;

		// UserBean beanExists = findByLogin(bean.getLogIn());

		/*
		 * if (beanExists != null && !(beanExists.getId() == bean.getId())) { //
		 * System.out.println("id " + beanExists.getId()); throw new
		 * DuplicateRecordException("Login Already Exists"); }
		 */

		try {
			conn = JDBCDataSource.getConnection();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement("UPDATE ST_ORDER SET SHOP=?, TYPE=?, PRICE=? WHERE ID=?");
			pstmt.setString(1, bean.getShop());
			pstmt.setString(2, bean.getType());
			pstmt.setInt(3, bean.getPrice());

			pstmt.executeUpdate();

			conn.commit();
			pstmt.close();

		} catch (Exception e) {
			// log.error("Database Exception...", e);
			try {
				conn.rollback();
			} catch (Exception e1) {
				throw new ApplicationException("Exception : update rollback" + e1.getMessage());
			}
			throw new ApplicationException("Exception : in updating user");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

	}

	/**
	 * 
	 * Delete a User
	 *
	 */
	public static void delete(OrderBean bean) throws ApplicationException {

		Connection conn = null;

		try {
			conn = JDBCDataSource.getConnection();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement("DELETE FROM ST_ORDER WHERE id=?");
			pstmt.setLong(1, bean.getId());

			pstmt.executeUpdate();

			conn.commit();
			pstmt.close();
		} catch (Exception e) {

			try {
				conn.rollback();
			} catch (Exception e1) {
				throw new ApplicationException("Exception : delete rollback" + e1.getMessage());
			}
			throw new ApplicationException("Exception : in deleting user");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

	}

	/**
	 * 
	 * Find User by Login
	 *
	 *//*
		 * public static OrderBean findByLogin(String login) throws ApplicationException
		 * {
		 * 
		 * StringBuffer sql = new StringBuffer("SELECT * FROM ST_ORDER WHERE LOGIN=?");
		 * 
		 * OrderBean bean = null; Connection conn = null;
		 * 
		 * try { conn = JDBCDataSource.getConnection(); PreparedStatement pstmt =
		 * conn.prepareStatement(sql.toString());
		 * 
		 * pstmt.setString(1, login); ResultSet rs = pstmt.executeQuery();
		 * 
		 * while (rs.next()) { bean = new OrderBean();
		 * 
		 * bean.setId(rs.getLong(1)); bea } rs.close(); } catch (Exception e) {
		 * log.error("Database Exception...", e); throw new
		 * ApplicationException("Exception : In getting user by Login"); } finally {
		 * JDBCDataSource.closeConnection(conn); }
		 * log.debug("Model Find By Login Ended"); return bean;
		 */

	/**
	 * 
	 * Find User by PK
	 *
	 */
	public OrderBean findByPK(long pk) throws ApplicationException {

		Connection conn = null;
		OrderBean bean = null;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement("select * from st_order where id = ?");
			pstmt.setLong(1, pk);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				bean = new OrderBean();

				bean.setId(rs.getInt(1));
				bean.setShop(rs.getString(2));
				bean.setType(rs.getString(4));
				bean.setPrice(rs.getInt(3));

			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
			throw new ApplicationException("Exception : In getting user by PK");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

		return bean;
	}

	/**
	 * 
	 * Search User with pagination
	 *
	 *
	 */
	public List search(OrderBean bean, int pageNo, int pageSize) throws ApplicationException {
		System.out.println("List search(UserBean bean, int pageNo, int pageSize)");

		StringBuffer sql = new StringBuffer("SELECT * FROM ST_ORDER WHERE 1=1");

		if (bean != null) {
			System.out.println(bean.getId());
			if (bean.getId() > 0) {
				sql.append(" AND ID Like '" + bean.getId() + "%'");
			}
			if (bean.getPrice() > 0) {
				sql.append("AND ID Like '" + bean.getPrice() + "%'");
			}

		}

		if (pageSize > 0) {
			pageNo = (pageNo - 1) * pageSize;

			sql.append(" LIMIT " + pageNo + ", " + pageSize);
		}

		System.out.println(sql.toString());

		ArrayList list = new ArrayList();
		Connection conn = null;

		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement(sql.toString());

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				bean = new OrderBean();

				bean.setId(rs.getLong(1));
				bean.setShop(rs.getString(2));
				bean.setType(rs.getString(3));
				bean.setPrice(rs.getInt(4));
				list.add(bean);
			}
			rs.close();
		} catch (Exception e) {

			throw new ApplicationException("Exception : in getting user list");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

		return list;

	}
}
